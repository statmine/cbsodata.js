// Generated by CoffeeScript 1.8.0
(function() {
  var API, BULK, CATALOG, cb, get_column_filter, get_data, get_data_bulk, get_featured, get_filter, get_meta, get_part, get_select, get_table_featured, get_tables, get_themes, http, id, queue;

  http = require("http");

  queue = require("queue-async");

  API = "http://opendata.cbs.nl/ODataApi/odata";

  BULK = "http://opendata.cbs.nl/ODataFeed/odata";

  CATALOG = "http://opendata.cbs.nl/ODataCatalog";

  id = function(id) {
    return id;
  };

  cb = function(error, results) {
    if (error) {
      console.log(error, results);
    }
    if (results.length) {
      console.log("Length: " + results.length);
      console.log("First item:");
      return console.log(results[0]);
    }
  };

  get_part = function(options, store, next) {
    console.log("Getting '" + options.url + "'...");
    return http.get(options.url, function(res) {
      var metadata;
      res.setEncoding('utf8');
      metadata = "";
      res.on("data", function(chunk) {
        return metadata += chunk;
      });
      return res.on("end", function() {
        metadata = (JSON.parse(metadata)).value;
        store[options.name] = metadata;
        return next(null, metadata);
      });
    });
  };

  get_meta = function(table, callback) {
    var Q, store, url;
    if (callback == null) {
      callback = cb;
    }
    Q = queue();
    store = {};
    url = "" + API + "/" + table;
    return http.get(url, function(res) {
      res.setEncoding('utf8');
      return res.on("data", function(metadata) {
        var md, _i, _len;
        metadata = (JSON.parse(metadata)).value;
        for (_i = 0, _len = metadata.length; _i < _len; _i++) {
          md = metadata[_i];
          if (md.name === "UntypedDataSet" || md.name === "TypedDataSet") {
            continue;
          }
          Q.defer(get_part, md, store);
        }
        return Q.awaitAll(function(error, results) {
          return callback(error, store);
        });
      }).on("error", callback);
    });
  };


  /*
  Create filter and select query
   */

  get_column_filter = function(column, filter) {
    var q, value;
    if (!filter || filter.length === 0) {
      return "";
    }
    if (typeof filter === 'string') {
      filter = [filter];
    }
    q = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = filter.length; _i < _len; _i++) {
        value = filter[_i];
        _results.push("" + column + " eq '" + value + "'");
      }
      return _results;
    })();
    q = q.join(' or ');
    if (filter.length > 1) {
      q = "(" + q + ")";
    }
    return q;
  };

  get_filter = function(filter) {
    var column, parts, q, values;
    if (!filter || Object.keys(filter).length === 0) {
      return "";
    }
    q = "&$filter=";
    parts = (function() {
      var _results;
      _results = [];
      for (column in filter) {
        values = filter[column];
        _results.push(get_column_filter(column, values));
      }
      return _results;
    })();
    q += parts.join(" and ");
    return q;
  };

  get_select = function(select) {
    if (!select || select.length === 0) {
      return "";
    }
    return "&$select=" + select.join(",");
  };


  /* Get data via API, which is restricted to 10 000 rows */

  get_data = function(table, select, filter, callback) {
    var url;
    if (callback == null) {
      callback = cb;
    }
    url = "" + API + "/" + table + "/TypedDataSet?$format=json";
    url += get_filter(filter);
    url += get_select(select);
    console.log("Retrieving data  from '" + url + "'");
    return http.get(url, function(res) {
      var data;
      res.setEncoding('utf8');
      data = "";
      res.on("data", function(chunk) {
        return data += chunk;
      });
      res.on("end", function() {
        data = (JSON.parse(data)).value;
        return callback(null, data);
      });
      return res.on("error", callback);
    });
  };


  /* large data download, writes to a (file) stream */

  get_data_bulk = function(table, select, filter, stream) {
    var url;
    url = "" + BULK + "/" + table + "/TypedDataSet?$format=json";
    url += get_filter(filter);
    url += get_select(select);
    console.log("Retrieving data  from '" + url + "'");

    /* rewrite to retrieve nextLink etc... */
    return http.get(url, function(res) {
      var data;
      res.setEncoding('utf8');
      data = "";
      res.on("data", function(chunk) {
        return data += chunk;
      });
      res.on("end", function() {
        data = (JSON.parse(data)).value;
        return callback(null, data);
      });
      return res.on("error", callback);
    });
  };

  get_tables = function(filter, callback) {
    var url;
    if (callback == null) {
      callback = cb;
    }
    url = "" + CATALOG + "/Tables?$format=json";
    url += get_filter(filter);
    return http.get(url, function(res) {
      var data;
      res.setEncoding('utf8');
      data = "";
      res.on("data", function(chunk) {
        return data += chunk;
      });
      return res.on("end", function() {
        data = (JSON.parse(data)).value;
        return callback(null, data);
      });
    });
  };

  get_themes = function(filter, callback) {
    var url;
    if (callback == null) {
      callback = cb;
    }
    url = "" + CATALOG + "/Themes?$format=json";
    url += get_filter(filter);
    console.log(url);
    return http.get(url, function(res) {
      var data;
      res.setEncoding('utf8');
      data = "";
      res.on("data", function(chunk) {
        return data += chunk;
      });
      return res.on("end", function() {
        data = (JSON.parse(data)).value;
        return callback(null, data);
      });
    });
  };

  get_featured = function(filter, callback) {
    var url;
    if (callback == null) {
      callback = cb;
    }
    url = "" + CATALOG + "/Featured?$format=json";
    url += get_filter(filter);
    console.log(url);
    return http.get(url, function(res) {
      var data;
      res.setEncoding('utf8');
      data = "";
      res.on("data", function(chunk) {
        return data += chunk;
      });
      return res.on("end", function() {
        data = (JSON.parse(data)).value;
        return callback(null, data);
      });
    });
  };

  get_table_featured = function(filter, callback) {
    var url;
    if (callback == null) {
      callback = cb;
    }
    url = "" + CATALOG + "/Table_Featured?$format=json";
    url += get_filter(filter);
    console.log(url);
    return http.get(url, function(res) {
      var data;
      res.setEncoding('utf8');
      data = "";
      res.on("data", function(chunk) {
        return data += chunk;
      });
      return res.on("end", function() {
        data = (JSON.parse(data)).value;
        return callback(null, data);
      });
    });
  };

  module.exports = {
    get_meta: get_meta,
    get_data: get_data,
    get_tables: get_tables,
    get_themes: get_themes,
    get_table_featured: get_table_featured,
    get_featured: get_featured
  };


  /* Testing
  
  get_meta("81251ned")
  get_data("81251ned", [] 
  	{Perioden: ['2010MM12','2011MM12'], WoonregioS:['NL10  ']},
  	 (_, results)-> console.log results[0], results.length)
  
  get_tables({Language:'en'})
  get_themes({Language: 'en'})
  get_table_featured()
   */

}).call(this);
